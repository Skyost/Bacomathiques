{"api":{"version":2,"latestVersion":2},"lesson":{"id":"algorithmique","level":"terminale","title":"Algorithmique","chapter":12,"specialty":false,"content":"/api/v2/terminale/algorithmique/","comments":"/api/v2/terminale/algorithmique/comments/","summary":"/api/v2/terminale/algorithmique/summary/"},"html":"\n\n\n\n\n\n\n\n<h2 id=\"definition\">Définition</h2>\n<p><strong>Un algorithme</strong> est une suite finie et ordonnée\nd’opérations ou d’instructions permettant de résoudre un problème ou\nd’obtenir un résultat. Ainsi, faire une recette de cuisine ou encore\neffectuer une division euclidienne à la main sont des exemples\nd’algorithmes.</p>\n<p>Dans ce cours, nous travaillerons à la fois avec des algorithmes <a href=\"https://python.org\">Python</a> et des algorithmes en\npseudo-code.</p>\n<h2 id=\"instructions\">Instructions</h2>\n<h3 id=\"creation-de-variables\">Création de variables</h3>\n<p><strong>Créer une variable</strong> permet de réserver un espace pour\ny stocker des données quelconques.<br>\nOn donne un nom à chaque espace pour le repérer : ce sont les noms de\nvariables. Dans certains langages, on leur donne également un type\n(entier, réel, ...) pour travailler avec (ce qui n’est pas le cas dans\nPython).</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb1\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>nombre <span class=\"op\">=</span> <span class=\"dv\">0</span> <span class=\"co\"># On crée la variable &quot;nombre&quot; et on lui assigne la valeur 0.</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>chaine <span class=\"op\">=</span> <span class=\"st\">&#39;Bonjour&#39;</span> <span class=\"co\"># On crée la variable &quot;chaine&quot; et on lui assigne la valeur &#39;Bonjour&#39;.</span></span></code></pre></div>\n</div>\n\n<h3 id=\"affectations-de-valeurs\">Affectations de valeurs</h3>\n<p>Comme dit précédemment, les variables sont des <q>espaces</q> dans\nlequel il est possible de stocker des informations.</p>\n<p>Cependant, après avoir créé cet espace, celui-ci est encore vide.\nC’est pourquoi on doit le <q>remplir</q> : c’est <strong>l’affectation\nd’une valeur à une variable</strong>.</p>\n<p>Il existe plusieurs manières d’affecter une valeur à une variable :\nsoit on lui donne directement sa valeur dans l’algorithme, soit on\ndemande à l’utilisateur d’entrer une valeur (il faut garder à l’esprit\nque nos algorithmes sont faits pour être utilisés par des\nutilisateurs).</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb2\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>x <span class=\"op\">=</span> <span class=\"bu\">int</span>(<span class=\"bu\">input</span>(<span class=\"st\">&#39;Veuillez entrer une valeur : &#39;</span>)) <span class=\"co\"># L&#39;utilisateur va entrer une valeur, on la convertir en entier et on va affecter celui-ci à notre variable &quot;x&quot;.</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>y <span class=\"op\">=</span> <span class=\"dv\">2</span><span class=\"op\">*</span>x <span class=\"op\">+</span> <span class=\"dv\">10</span> <span class=\"co\"># Une fois fait, &quot;y&quot; va prendre la valeur 2 * x + 10. Par exemple, si l&#39;utilisateur entre &quot;10&quot;, &quot;y&quot; vaudra 30.</span></span></code></pre></div>\n</div>\n\n<p>Une fois que l’on a affecté une valeur à une variable, il est encore\npossible de la changer !</p>\n<p>Les <strong>listes</strong> sont des types de variables particuliers.\nCe sont en effet, <q>des variables qui contiennent des\nvariables</q>.</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb3\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>fruits <span class=\"op\">=</span> [<span class=\"st\">&#39;pomme&#39;</span>, <span class=\"st\">&#39;banane&#39;</span>, <span class=\"st\">&#39;poire&#39;</span>]</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>fruits.append(<span class=\"st\">&#39;cerise&#39;</span>) <span class=\"co\"># On peut ajouter un objet à notre liste.</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">del</span> fruits[<span class=\"dv\">0</span>] <span class=\"co\"># On peut également supprimer un objet de la liste en fonction de son index (ici, on supprime le premier).</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>fruits.remove(<span class=\"st\">&#39;pomme&#39;</span>) <span class=\"co\"># Mais on peut aussi en supprimer un avec sa valeur.</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># Beaucoup d&#39;autres opérations sur les listes sont disponibles (longueur, renversement, ...). N&#39;hésitez pas à vous renseigner !</span></span></code></pre></div>\n</div>\n<h3 id=\"affichage-de-variables\">Affichage de variables</h3>\n<p>Nos algorithmes étant faits pour être utilisés, il faut donc\n<strong>retourner un résultat</strong> sinon ceux-ci seraient inutiles.\nC’est pourquoi, on peut <q>afficher</q> les valeurs des variables (les\nmontrer à l’utilisateur).</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb4\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"st\">&#39;Voici la valeur de &quot;maVariable&quot; :&#39;</span>, maVariable) <span class=\"co\"># Permet d&#39;afficher la valeur de &quot;maVariable&quot;.</span></span></code></pre></div>\n</div>\n\n<h2 id=\"blocs-dinstructions\">Blocs d’instructions</h2>\n<h3 id=\"definition-1\">Définition</h3>\n<p>Les blocs d’instructions sont des parties de l’algorithme (ce sont\ndes <q>algorithmes dans l’algorithme</q>) qui s’exécutent suivant\ncertaines conditions propres aux différents blocs d’instructions.</p>\n<h3 id=\"les-blocs-si-et-sinon\">Les blocs SI et SINON</h3>\n<p>Les blocs <strong>SI</strong> et <strong>SINON</strong> sont des\nblocs d’instructions très utilisés qui permettent de tester une\ncondition : si elle est réalisée, on va exécuter les instructions se\nsituant sous le bloc SI et sinon, on va exécuter celles se situant sous\nle bloc SINON.</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb5\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>x <span class=\"op\">=</span> <span class=\"dv\">2</span> <span class=\"co\"># On attribue à &quot;x&quot; la valeur 2.</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> x <span class=\"op\">==</span> <span class=\"dv\">3</span>: <span class=\"co\"># Si &quot;x&quot; est égal à 3...</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&#39;&quot;x&quot; est égal à 3.&#39;</span>) <span class=\"co\"># ... Alors on affiche ce message. Mais ici, &quot;x&quot; vaut 2 donc ce message ne sera jamais affiché.</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">else</span>: <span class=\"co\"># Sinon...</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&#39;&quot;x&quot; n</span><span class=\"ch\">\\&#39;</span><span class=\"st\">est pas égal à 3.&#39;</span>) <span class=\"co\"># ... On affiche ce message.</span></span></code></pre></div>\n</div>\n\n<h3 id=\"la-boucle-pour\">La boucle POUR</h3>\n<p>La <strong>boucle POUR</strong> est un bloc d’instruction qui\ns’exécute et qui va faire prendre à une variable toutes les valeurs\ncomprises dans un ensemble d’entiers.</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb6\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"op\">-</span><span class=\"dv\">5</span>, <span class=\"dv\">6</span>): <span class=\"co\"># Pour chaque entier entre -5 (inclus) et 6 (exclu)...</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(i) <span class=\"co\"># ... On affiche cet entier.</span></span></code></pre></div>\n</div>\n\n<h3 id=\"la-boucle-tant-que\">La boucle TANT QUE</h3>\n<p>Cette boucle, différente de la boucle POUR, permet d’exécuter son\nbloc d’instructions tant qu’une certaine condition est valable.</p>\n<div class=\"formula\">\n<h4>En python</h4>\n<div class=\"sourceCode\" id=\"cb7\" data-language=\"python\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>x <span class=\"op\">=</span> <span class=\"dv\">100</span> <span class=\"co\"># On affecte à &quot;x&quot; la valeur 100.</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">while</span> x <span class=\"op\">&gt;</span> <span class=\"dv\">10</span>: <span class=\"co\"># Tant que x est supérieur à 10...</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    x <span class=\"op\">=</span> x <span class=\"op\">/</span> <span class=\"dv\">2</span> <span class=\"co\"># On divise x par 2 (i.e. on affecte à &quot;x&quot; la valeur x/2).</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(x) <span class=\"co\"># On affiche la valeur de &quot;x&quot;.</span></span></code></pre></div>\n</div>\n\n\n"}